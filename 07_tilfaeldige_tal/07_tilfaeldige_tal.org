#+title: Tilfældige tal
#+subtitle: Programmering B
#+options: toc:nil timestamp:nil ^:{}

* Introduktion
Hvis man skal bruge tilfældige tal, kan hurtigt komme til at tage lang tid at slå med virkelige terninger. Heldigvis er computere rigtig gode til at give mange (semi)tilfældige tal på meget kort tid. I de følgende afsnit vil I blive introduceret til forskellige måder at få forskellige tilfældige tal i python.

I sin simpleste form kan python *ikke* håndtere tilfældige tal. Heldigvis er der skrevet et bibliotek til netop tilfældige tal i standardinstallationen af python. Dette bibliotek skal blot importeres i starten af ens program på f.eks. følgende måde. *Sørg for at jeres programfil hedder noget andet end* =random.py=, eller opstår der nemlig problemer.

#+begin_src python :exports both :results output :eval never-export
import random
#+end_src

* Tilfældige heltal

** randrange
~randrange~ er en af de simpleste måder at få et tilfældigt heltal på. Herer nogle eksempler på anvendelse af ~randrange~.

Fra pythondokumentationen står der følgende om ~randrang~:

#+begin_example
random.randrange(stop)
random.randrange(start, stop[, step])
#+end_example
~stop~ angiver den øverste grænse. Værdien er lige præcis ikke med i intervallet.
~start~ angiver den nederste grænse. Værdien er med i intervallet.
~step~ er ikke obligatorisk. Hvis den er med angiver det stepsize. 

#+begin_src python :exports both :results output :eval never-export
import random
# Tilfældigt heltal fra nul til lige inden 10. Der kan altså vælges mellem 10 forskellige tal
a = random.randrange(10)
print(f"a = {a}")
# Tilfældigt heltal fra og med en startværdi til lige inden en slutværdi
b = random.randrange(2, 5) # b kan altså kun være 2, 3 og 4
print(f"b = {b}")
# Tilfældigt heltal i et interval med en skridtlængde forskellig fra 1
c = random.randrange(2, 23, 4) # c kan antage værdierne 2, 6, 10, 14, 18 og 22
print(f"c = {c}")
#+end_src

#+RESULTS:
#+begin_example
a = 4
b = 4
c = 18
#+end_example



** randint
~randint~ er et alias for ~randrange(start, stop+1)~, altså hvor begge ender i intervallet er med som muligheder.

Hvis de to første eksempler fra den tidligere viste kode, skal skrives vha ~randint~, så ser den således ud:

#+begin_src python :exports both :results output :eval never-export
import random
# Tilfældigt heltal fra nul til og med 9. Der kan altså vælges mellem 10 forskellige tal
a = random.randint(0, 9)
print(f"a = {a}")
# Tilfældigt heltal fra og med en startværdi til lige inden en slutværdi
b = random.randint(2, 4) # b kan altså kun være 2, 3 og 4
print(f"b = {b}")
#+end_src

#+RESULTS:
#+begin_example
a = 5
b = 2
#+end_example


* Tilfældige kommatal

** random
~random.random()~ giver tilfældige kommatal fra og med 0 til lige inden 1.0. Skrevet som et matematisk interval er det =[0 , 1[=.

#+begin_src python :exports both :results output :eval never-export
import random
for _ in range(10):
    print(random.random())
#+end_src

#+RESULTS:
#+begin_example
0.8150913606464288
0.07397052353932554
0.005883678485159027
0.34220314659519935
0.1842690851371448
0.6286296902960742
0.26424084433250017
0.9472427608922108
0.4906632362023625
0.9932488611078196
#+end_example

** uniform
~random.uniform~ kan give returnere tilfældige kommatal i et interval, hvor sandsynligheden er lige stor for alle decimaltallene.

#+begin_src python :exports both :results output :eval never-export
import random
for _ in range(10):
    print(random.uniform(2.5, 17.5))
#+end_src

#+RESULTS:
#+begin_example
17.00579055310127
4.490579245408291
15.001201757818208
3.2451765219566013
16.059751592714623
7.663094944290456
4.931070601203658
6.618548868430212
10.185962047007152
11.134883919228598
#+end_example


** Gæt et tal
Her er et lille eksempel på, hvordan tilfældige tal kan anvendes i et spil. Kopier koden ind i jeres favoriteditor/IDE og kør programmet.

Efterfølgende kan I gennemgå koden at se, om I kan forstå, hvad der sker på hver linje. Marker alle de steder i koden, hvor I er i tvivl.

#+begin_src python :exports both :results output :eval never-export :tangle gaet_mit_tal.py
import random
MIN = 1
MAX = 100
MAX_GAET = 10

def nyt_spil():
    print(f"Hep hey! Jeg tænker på et tal mellem {MIN} og {MAX}. Kan du gætte det?")
    print(f"Du har {MAX_GAET} gæt til det.")
    hemmeligt_tal = random.randint(MIN, MAX)
    antal_gaet = 0
    while True:
        try:
            brugergaet = int(input(f"{antal_gaet + 1}. forsøg. Hvilket tal tænker jeg på: "))
        except ValueError:
            print("Du skal indtaste et heltal.")
            continue
        antal_gaet += 1
        if brugergaet > hemmeligt_tal:
            print("For højt.")
        elif brugergaet < hemmeligt_tal:
            print("For lavt.")
        else:
            print("Du gættede mit hemmelige tal. Tillykke.")
            break

        if antal_gaet >= MAX_GAET:
            print(f"Du gættede ikke mit hemmelige tal inden for {MAX_GAET} forsøg.")
            print(f"Mit hemmelige tal var {hemmeligt_tal}.")
            break
        
def spil_igen():
    print("Vil du spille igen?")
    while True:
        svar = input(f"Skriv Ja eller Nej: ")
        if svar.lower() in ("ja", "j", "yes", "y"):
            return True
        elif svar.lower() in ("nej", "n", "no"):
            return False
        else:
            print("Dit svar kan ikke bruges. Skriv ja eller nej.")

def main():
    vil_gerne_spille = True
    while vil_gerne_spille:
        nyt_spil()
        vil_gerne_spille = spil_igen()
    print("Tak for spillet.")

main()
#+end_src


* Opgave
Analysér programmet "gæt et tal" fra forrige afsnit og generér et rutediagram vha. ~plantuml~, som beskriver programmets udførelse.

- Rutediagram hedder også et flowchart eller et ~activity diagram~ i ~plantuml~.
- Find eksempler på rutediagrammer skrevet i ~plantuml~ her: [[https://plantuml.com/activity-diagram-beta]]
- I kan skrive plantuml-koden ind her: [[https://www.plantuml.com/plantuml/uml/]], hvorefter diagrammet vil blive autogenereret for jer.
- I kan også finde information om ~plantuml~ i [[https://github.com/Vibenshus-Gymnasium-Programmering/Arcade_praesentationer/blob/main/06_Betinget_udfoerelse/06_Betinget_udfoerelse.org][præsentationen om betinget udførelse]].
